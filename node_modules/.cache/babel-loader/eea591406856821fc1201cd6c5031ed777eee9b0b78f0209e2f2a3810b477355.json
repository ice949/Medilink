{"ast":null,"code":"import { ethers } from \"ethers\";\nimport MEDICAL_ABI from \"../abis/MedicalRecords.json\";\nexport const loadProvider = dispatch => {\n  const connection = new ethers.providers.Web3Provider(window.ethereum);\n  dispatch({\n    type: \"PROVIDER_LOADED\",\n    connection\n  });\n  return connection;\n};\nexport const loadNetwork = async (provider, dispatch) => {\n  const {\n    chainId\n  } = await provider.getNetwork();\n  dispatch({\n    type: \"NETWORK_LOADED\",\n    chainId\n  });\n  return chainId;\n};\nexport const loadAccount = async (provider, dispatch) => {\n  const accounts = await window.ethereum.request({\n    method: \"eth_requestAccounts\"\n  });\n  const account = ethers.utils.getAddress(accounts[0]);\n  dispatch({\n    type: \"ACCOUNT_LOADED\",\n    account\n  });\n  let balance = await provider.getBalance(account);\n  balance = ethers.utils.formatEther(balance);\n  dispatch({\n    type: \"ETHER_BALANCE_LOADED\",\n    balance\n  });\n  return account;\n};\nexport const loadMedical = (provider, address, dispatch) => {\n  const medical = new ethers.Contract(address, MEDICAL_ABI, provider);\n  dispatch({\n    type: \"MEDICAL_LOADED\",\n    medical\n  });\n  return medical;\n};\nexport const loadAllData = async (provider, medical, dispatch) => {\n  const block = await provider.getBlockNumber();\n  const medicalStream = await medical.queryFilter(\"MedicalRecords__AddRecord\", 0, block);\n  const medicalRecords = medicalStream.map(event => event.args);\n  dispatch({\n    type: \"ALL_MEDICAL_RECORDS\",\n    medicalRecords\n  });\n  const deleteStream = await medical.queryFilter(\"MedicalRecords__DeleteRecord\", 0, block);\n  const deleteRecords = deleteStream.map(event => event.args);\n  dispatch({\n    type: \"ALL_DELETED_RECORDS\",\n    deleteRecords\n  });\n};\nexport const submitRecord = async (name, age, gender, bloodType, allergies, diagnosis, treatment, provider, medical, dispatch) => {\n  let transaction;\n  dispatch({\n    type: \"NEW_RECORD_LOADED\"\n  });\n  try {\n    const signer = await provider.getSigner();\n    transaction = await medical.connect(signer).addRecord(name, age, gender, bloodType, allergies, diagnosis, treatment);\n    await transaction.wait();\n  } catch (error) {\n    dispatch({\n      type: \"NEW_RECORD_FAIL\"\n    });\n  }\n};\nexport const deleteData = async (medical, recordId, dispatch, provider) => {\n  let transaction;\n  dispatch({\n    type: \"DELETE_REQUEST_INNITIALIZED\"\n  });\n  try {\n    const signer = await provider.getSigner();\n    transaction = await medical.connect(signer).deleteRecord(recordId);\n    await transaction.wait();\n  } catch (error) {\n    dispatch({\n      type: \"DELETE_REQUEST_FAILED\"\n    });\n  }\n};\nexport const subscribeToEvents = async (medical, dispatch) => {\n  medical.on(\"MedicalRecords__AddRecord\", (recordId, timestamp, name, age, gender, bloodType, allergies, diagnosis, treatment, event) => {\n    const medicalOrder = event.args;\n    dispatch({\n      type: \"NEW_RECORD_SUCCESS\",\n      medicalOrder,\n      event\n    });\n  });\n  medical.on(\"MedicalRecords__DeleteRecord\", (recordId, timestamp, name, age, gender, bloodType, allergies, diagnosis, treatment, event) => {\n    const deleteOrder = event.args;\n    dispatch({\n      type: \"DELETE_REQUEST_SUCCESS\",\n      deleteOrder,\n      event\n    });\n  });\n};","map":{"version":3,"names":["ethers","MEDICAL_ABI","loadProvider","dispatch","connection","providers","Web3Provider","window","ethereum","type","loadNetwork","provider","chainId","getNetwork","loadAccount","accounts","request","method","account","utils","getAddress","balance","getBalance","formatEther","loadMedical","address","medical","Contract","loadAllData","block","getBlockNumber","medicalStream","queryFilter","medicalRecords","map","event","args","deleteStream","deleteRecords","submitRecord","name","age","gender","bloodType","allergies","diagnosis","treatment","transaction","signer","getSigner","connect","addRecord","wait","error","deleteData","recordId","deleteRecord","subscribeToEvents","on","timestamp","medicalOrder","deleteOrder"],"sources":["C:/Users/Madalitso/Documents/GitHub/Blockchain/Medilink/src/store/interactions.js"],"sourcesContent":["import { ethers } from \"ethers\";\r\nimport MEDICAL_ABI from \"../abis/MedicalRecords.json\";\r\nexport const loadProvider = (dispatch) => {\r\n  const connection = new ethers.providers.Web3Provider(window.ethereum);\r\n  dispatch({ type: \"PROVIDER_LOADED\", connection });\r\n  return connection;\r\n};\r\nexport const loadNetwork = async (provider, dispatch) => {\r\n  const { chainId } = await provider.getNetwork();\r\n  dispatch({ type: \"NETWORK_LOADED\", chainId });\r\n  return chainId;\r\n};\r\nexport const loadAccount = async (provider, dispatch) => {\r\n  const accounts = await window.ethereum.request({\r\n    method: \"eth_requestAccounts\",\r\n  });\r\n  const account = ethers.utils.getAddress(accounts[0]);\r\n  dispatch({ type: \"ACCOUNT_LOADED\", account });\r\n  let balance = await provider.getBalance(account);\r\n  balance = ethers.utils.formatEther(balance);\r\n  dispatch({ type: \"ETHER_BALANCE_LOADED\", balance });\r\n  return account;\r\n};\r\nexport const loadMedical = (provider, address, dispatch) => {\r\n  const medical = new ethers.Contract(address, MEDICAL_ABI, provider);\r\n  dispatch({ type: \"MEDICAL_LOADED\", medical });\r\n  return medical;\r\n};\r\nexport const loadAllData = async (provider, medical, dispatch) => {\r\n  const block = await provider.getBlockNumber();\r\n  const medicalStream = await medical.queryFilter(\r\n    \"MedicalRecords__AddRecord\",\r\n    0,\r\n    block\r\n  );\r\n  const medicalRecords = medicalStream.map((event) => event.args);\r\n  dispatch({ type: \"ALL_MEDICAL_RECORDS\", medicalRecords });\r\n  const deleteStream = await medical.queryFilter(\r\n    \"MedicalRecords__DeleteRecord\",\r\n    0,\r\n    block\r\n  );\r\n  const deleteRecords = deleteStream.map((event) => event.args);\r\n  dispatch({ type: \"ALL_DELETED_RECORDS\", deleteRecords });\r\n};\r\n\r\nexport const submitRecord = async (\r\n  name,\r\n  age,\r\n  gender,\r\n  bloodType,\r\n  allergies,\r\n  diagnosis,\r\n  treatment,\r\n  provider,\r\n  medical,\r\n  dispatch\r\n) => {\r\n  let transaction;\r\n  dispatch({ type: \"NEW_RECORD_LOADED\" });\r\n  try {\r\n    const signer = await provider.getSigner();\r\n\r\n    transaction = await medical\r\n      .connect(signer)\r\n      .addRecord(name, age, gender, bloodType, allergies, diagnosis, treatment);\r\n\r\n    await transaction.wait();\r\n  } catch (error) {\r\n    dispatch({ type: \"NEW_RECORD_FAIL\" });\r\n  }\r\n};\r\n\r\nexport const deleteData = async (medical, recordId, dispatch, provider) => {\r\n  let transaction;\r\n  dispatch({ type: \"DELETE_REQUEST_INNITIALIZED\" });\r\n  try {\r\n    const signer = await provider.getSigner();\r\n    transaction = await medical.connect(signer).deleteRecord(recordId);\r\n    await transaction.wait();\r\n  } catch (error) {\r\n    dispatch({ type: \"DELETE_REQUEST_FAILED\" });\r\n  }\r\n};\r\n\r\nexport const subscribeToEvents = async (medical, dispatch) => {\r\n  medical.on(\r\n    \"MedicalRecords__AddRecord\",\r\n    (\r\n      recordId,\r\n      timestamp,\r\n      name,\r\n      age,\r\n      gender,\r\n      bloodType,\r\n      allergies,\r\n      diagnosis,\r\n      treatment,\r\n      event\r\n    ) => {\r\n      const medicalOrder = event.args;\r\n      dispatch({ type: \"NEW_RECORD_SUCCESS\", medicalOrder, event });\r\n    }\r\n  );\r\n  medical.on(\r\n    \"MedicalRecords__DeleteRecord\",\r\n    (\r\n      recordId,\r\n      timestamp,\r\n      name,\r\n      age,\r\n      gender,\r\n      bloodType,\r\n      allergies,\r\n      diagnosis,\r\n      treatment,\r\n      event\r\n    ) => {\r\n      const deleteOrder = event.args;\r\n      dispatch({ type: \"DELETE_REQUEST_SUCCESS\", deleteOrder, event });\r\n    }\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}